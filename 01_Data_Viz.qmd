---
title: "Sensor data visualisation"
format: html
editor: visual
---

## Data merging 

In the 2022 season there were three data loggers collecting data:  
- CR1000_AF1: air temperature and relative humidity, soil temperature and soil volumetric water content at 6 positions  
- CR1000_AF2: radiation at 6 positions  
- ZL6: soil water potential and soil temperature at 3 positions (4, 5 and 6)  

In the 2023 season we set up a single data logger for all sensor data:  
- CR1000_AFLT 

All data are now merged in a single `rds` file `meteodata.rds` (long format).


## Data loading and correction

```{r setup, message=FALSE, warning=FALSE}
library(tidyverse)
datapath <- "../23_Data/"

## read the data file and add grouping attributes 
meteodata <- read_rds(paste0(datapath, "meteodata.rds")) %>%
  mutate(YEAR = year(DateTime), DOY = yday(DateTime), WK = week(DateTime)) 

## error in RAD sensor 6: remove data from 2023-07-03 until 2023-07-28
indices_1 = which((between(meteodata$DateTime, as_date("2023-07-03"), as_date("2023-07-28"))) & (meteodata$sensor == "RAD") & meteodata$position == "6")
## error in RAD sensor 2: remove data from 2022-06-21 until 2022-10-12
indices_2 = which((between(meteodata$DateTime, as_date("2022-06-21"), as_date("2022-10-12"))) & (meteodata$sensor == "RAD") & meteodata$position == "2")

## error in Ta sensor 6: remove erratic data lower than -5
indices_3 <- c(which(meteodata$value < -5 & meteodata$sensor=="Ta"), 
               which(meteodata$DateTime %in% as_datetime(c("2023-08-20 10:40:00", "2023-08-20 11:20:00", "2023-08-27 18:20:00")) & meteodata$position == 6 & meteodata$sensor == "Ta"))

indices = c(indices_1, indices_2, indices_3)

meteodata <- meteodata %>%
  mutate(value = replace(value, indices, NA)) %>%
  drop_na()

```

There were seven growing periods (`GP`) of the perennial crop. We select only the data available within these growing periods and group them by GP: 

```{r}
GPs <- tribble(
  ~GP, ~start, ~end,
  1, as_date("2022-04-29"), as_date("2022-05-30"),
  2, as_date("2022-06-10"), as_date("2022-08-03"),
  3, as_date("2022-08-07"), as_date("2022-10-11"),
  4, as_date("2023-04-05"), as_date("2023-04-27"),
  5, as_date("2023-05-06"), as_date("2023-06-12"),
  6, as_date("2023-06-22"), as_date("2023-07-25"),
  7, as_date("2023-07-29"), as_date("2023-09-04")
)
GPs
GPsubset <- function(x){
  return(meteodata %>% 
    filter(between(DateTime, GPs$start[x], GPs$end[x])) %>%
    mutate(GP = x))
}

meteo_GPs <- 1:7 %>%
  map(\(x) GPsubset(x)) 

```

## Air temperature

::: {.panel-tabset}

### Complete time series
Below is a complete time series per growing period to identify erratic data

```{r seriesT}
seriesfun <- function(x, variable){
  data <- meteo_GPs[[x]] %>%
  filter(sensor == variable) %>%
  arrange(DateTime)
  
  print(ggplot(data) + 
  theme_bw() + 
  geom_line(mapping = aes(x = DateTime, y = value, color = position), linewidth = 0.8) + 
  ylab(variable) + ggtitle(paste0("GP ", x)) +
  scale_x_datetime(labels = scales::date_format("%Y-%m-%d", locale = "en"),
                  limits = c(as.POSIXct(GPs$start[x]), as.POSIXct(GPs$end[x]))))
}

1:7 %>% walk(\(x) seriesfun(x, "Ta"))


```

### Example time series

```{r exampleT}
DOY_1 <- 125

T_example_1 <- meteo_GPs[[1]] %>%
  filter(sensor == "Ta") %>%
  arrange(DateTime) %>%
  filter(DOY == DOY_1) 

ggplot() +
  theme_bw() +
  geom_line(aes(x = DateTime, y = value, color = position), data = T_example_1, linewidth = 0.8) +
  scale_x_datetime(labels = scales::date_format("%Y-%m-%d %H:%M", locale = "en"))

```

### Overall effect

To compare air temperature, we first calculate the daily mean temperature, and then calculate the temperature sum.  
Sensor 2 in GP5 has missing data, explaining the lower value there.  
**To discuss**: what is a good approach to deal with missing data points

```{r totalT, warning=FALSE, message=FALSE}
Tair_fun <- function(data){
  
  return(data %>% 
    filter(sensor == "Ta") %>% 
    filter(between(value, -5, 45)) %>%
    group_by(YEAR, DOY, position, GP) %>%
    reframe(T_mean = mean(value),
            T_n = length(value)) %>% 
    arrange(YEAR, DOY) %>%
    ungroup() %>%
    group_by(position, GP) %>%
    mutate(T_sum = sum(T_mean),
           T_ntot = sum(T_n)))
}

Tair_data <- meteo_GPs %>% 
  map(\(x) Tair_fun(x)) %>%
  list_rbind()

ggplot(Tair_data) +
  theme_bw() +
  geom_col(mapping = aes(x=GP, y = T_sum, group = position, fill = position), position = position_dodge())

ggplot(Tair_data) +
  theme_bw() +
  geom_col(mapping = aes(x=GP, y = T_ntot, group = position, fill = position), position = position_dodge())


```

:::
## Light intensity
::: {.panel-tabset}

### Complete time series
Below is a complete time series per growing period to identify erratic data

```{r seriesR}

1:7 %>% walk(\(x) seriesfun(x, "RAD"))


```

### Example time series

```{r exampleR}
DOY_1 <- 134

R_example_1 <- meteo_GPs[[1]] %>%
  filter(sensor == "RAD") %>%
  arrange(DateTime) %>%
  filter(DOY == DOY_1) 

ggplot() +
  theme_bw() +
  geom_line(aes(x = DateTime, y = value, color = position), data = R_example_1 %>% filter(position %in% 1:3), linewidth = 1) +
  scale_x_datetime(labels = scales::date_format("%Y-%m-%d %H:%M", locale = "en"))
ggplot() +
  theme_bw() +
  geom_line(aes(x = DateTime, y = value, color = position), data = R_example_1 %>% filter(position %in% 4:6), linewidth = 1) +
  scale_x_datetime(labels = scales::date_format("%Y-%m-%d %H:%M", locale = "en"))

```

### Overall effect

To have an estimate of the total light interception for each position, we first calculate the mean radiation per day and than the sum over the days.  
Why first the mean? Occasionally, a sensor reading is missing, and then it is safer (but not perfect) to take the mean.  
I also included a plot of the total number of records, to interpret potential differences between positions:  
- sensor 6 has missing data in GP4, 5, 6 and 7. In GP6, complete days are missing, so the sum is lower, whereas in the other GPs only parts of days are missing, ultimately leading to higher values as the mean was calculated per day (*link to rain events?*)  
- sensor 2 has missing data in GP2 and 3. As these were complete days of missing data, the result was lower (GP2) or even absent (GP3).

```{r totalR, message = F, warning=FALSE}

light_fun <- function(data){
  
  return(data %>%
    filter(sensor == "RAD") %>%
    filter(value >= 0.0) %>%
    group_by(YEAR, DOY, position, GP) %>%
    reframe(RAD_mean = mean(value, na.rm = T) * 5.0 *24*3600/1e6,
            RAD_n = length(value)) %>%
    group_by(position, GP) %>%
    summarize(RAD_sum = sum(RAD_mean, na.rm = T),
              RAD_ntot = sum(RAD_n)))
}

Light_data <- meteo_GPs %>% 
  map(\(x) light_fun(x)) %>%
  list_rbind()

ggplot(Light_data) +
  theme_bw() +
  geom_col(mapping = aes(x=GP, y = RAD_sum, group = position, fill = position), position = position_dodge())

ggplot(Light_data) +
  theme_bw() +
  geom_col(mapping = aes(x=GP, y = RAD_ntot, group = position, fill = position), position = position_dodge())

```

:::
## Soil temperature
::: {.panel-tabset}

### Complete time series - 1
Below is a complete time series per growing period to identify erratic data.  
Data from the Thermistor 107 sensor.

```{r seriesTs}

1:7 %>% walk(\(x) seriesfun(x, "Ts"))


```

### Complete time series - 2
Below is a complete time series per growing period to identify erratic data.  
Data from the Teros21 sensor.
```{r seriesTsz}

1:7 %>% walk(\(x) seriesfun(x, "Tsz"))


```

### Example time series


### Overall effect

:::

## Soil water potential
::: {.panel-tabset}

### Complete time series
Below is a complete time series per growing period to identify erratic data


```{r seriesPsis}

1:7 %>% walk(\(x) seriesfun(x, "Psis"))


```


### Example time series


### Overall effect

:::

## Soil water content
::: {.panel-tabset}

### Complete time series
Below is a complete time series per growing period to identify erratic data

```{r seriesVWC}

1:7 %>% walk(\(x) seriesfun(x, "VWC"))


```

### Example time series


### Overall effect

:::
